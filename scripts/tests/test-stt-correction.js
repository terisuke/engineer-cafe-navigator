#!/usr/bin/env node

/**
 * Test STT correction patterns
 */

// Simple STT correction implementation for testing
const corrections = [
  {
    patterns: [/ÊâçËÉΩ[\s]*„Ç´„Éï„Çß/gi, /ÊâçËÉΩ[\s]*cafe/gi, /„Çµ„Ç§„Éé„Ç¶[\s]*„Ç´„Éï„Çß/gi],
    replacement: '„Çµ„Ç§„Éé„Ç´„Éï„Çß'
  },
  {
    patterns: [/„Ç®„É≥„Ç∏„É≥„Ç´„Éï„Çß/gi, /engineer\s*cafe/gi],
    replacement: '„Ç®„É≥„Ç∏„Éã„Ç¢„Ç´„Éï„Çß'
  },
  {
    patterns: [/Èöé‰∏ã/g],
    replacement: 'Âú∞‰∏ã'
  },
  {
    patterns: [/„ÉØ„Ç§„Éï„Ç°„Ç§/g],
    replacement: 'Wi-Fi'
  }
];

function correctSTT(text) {
  let corrected = text;
  
  for (const correction of corrections) {
    for (const pattern of correction.patterns) {
      corrected = corrected.replace(pattern, correction.replacement);
    }
  }
  
  // Add period at end if missing
  if (!/[„ÄÇÔºÅÔºü]$/.test(corrected)) {
    corrected += '„ÄÇ';
  }
  
  return corrected;
}

console.log('üé§ Testing STT Correction Patterns');
console.log('================================================================================');

const testCases = [
  { input: '„Åò„ÇÉ ÊâçËÉΩ cafe„ÅÆÊñπ„Åß„ÄÇ', expected: '„Åò„ÇÉ„Çµ„Ç§„Éé„Ç´„Éï„Çß„ÅÆÊñπ„Åß„ÄÇ' },
  { input: '„Çµ„Ç§„Éé„Ç¶ „Ç´„Éï„Çß„ÅÆÂñ∂Ê•≠ÊôÇÈñì„ÅØÔºü', expected: '„Çµ„Ç§„Éé„Ç´„Éï„Çß„ÅÆÂñ∂Ê•≠ÊôÇÈñì„ÅØÔºü' },
  { input: 'engineer cafe„ÅØ„Å©„Åì„Åß„Åô„ÅãÔºü', expected: '„Ç®„É≥„Ç∏„Éã„Ç¢„Ç´„Éï„Çß„ÅØ„Å©„Åì„Åß„Åô„ÅãÔºü' },
  { input: 'Èöé‰∏ã„ÅÆMTG„Çπ„Éö„Éº„Çπ„Å´„Å§„ÅÑ„Å¶', expected: 'Âú∞‰∏ã„ÅÆMTG„Çπ„Éö„Éº„Çπ„Å´„Å§„ÅÑ„Å¶„ÄÇ' },
  { input: '„ÉØ„Ç§„Éï„Ç°„Ç§„ÅØ‰Ωø„Åà„Åæ„Åô„ÅãÔºü', expected: 'Wi-Fi„ÅØ‰Ωø„Åà„Åæ„Åô„ÅãÔºü' }
];

let passCount = 0;

for (const testCase of testCases) {
  const corrected = correctSTT(testCase.input);
  const passed = corrected === testCase.expected;
  if (passed) passCount++;
  
  console.log(`\nInput: "${testCase.input}"`);
  console.log(`Expected: "${testCase.expected}"`);
  console.log(`Actual: "${corrected}"`);
  console.log(passed ? '‚úÖ PASS' : '‚ùå FAIL');
}

console.log(`\n================================================================================`);
console.log(`Result: ${passCount}/${testCases.length} tests passed`);

// Test API if available
const http = require('http');

console.log('\nüåê Testing API Endpoint');
console.log('================================================================================');

const postData = JSON.stringify({
  question: '„Çµ„Ç§„Éé„Ç´„Éï„Çß„ÅÆÂñ∂Ê•≠ÊôÇÈñì„ÅØÔºü',
  sessionId: `test_${Date.now()}`,
  language: 'ja'
});

const options = {
  hostname: 'localhost',
  port: 3002,
  path: '/api/qa',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': Buffer.byteLength(postData)
  }
};

const req = http.request(options, (res) => {
  let data = '';
  
  res.on('data', (chunk) => {
    data += chunk;
  });
  
  res.on('end', () => {
    try {
      const response = JSON.parse(data);
      console.log('API Response:');
      console.log(`  Status: ${res.statusCode}`);
      console.log(`  Agent: ${response.response?.agentName}`);
      console.log(`  Text preview: ${response.response?.text?.substring(0, 100)}...`);
      
      // Check for emotion tag
      const emotionMatch = response.response?.text?.match(/^\[(\w+)\]/);
      if (emotionMatch) {
        console.log(`  Emotion tag: [${emotionMatch[1]}]`);
        console.log('  ‚úÖ Emotion tag present');
      } else {
        console.log('  ‚ùå No emotion tag found');
      }
    } catch (e) {
      console.log('‚ùå Failed to parse response:', e.message);
    }
  });
});

req.on('error', (e) => {
  console.log('‚ö†Ô∏è  Cannot connect to server:', e.message);
  console.log('Make sure the dev server is running with: pnpm dev');
});

req.write(postData);
req.end();